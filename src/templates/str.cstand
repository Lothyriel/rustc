typedef struct {
  charVec chars;
} String;

Result_size_t String_parse_size_t(const String *s) {
  if (s->chars.len == 0) {
    return (Result_size_t){.tag = ERR, .err = "Empty string"};
  }

  size_t result = 0;
  for (size_t i = 0; i < s->chars.len; i++) {
    char c = s->chars.data[i];
    if (!char_is_ascii_digit(c)) {
      return (Result_size_t){.tag = ERR, .err = "Non numeric char found"};
    }

    result = result * 10 + (c - '0');
  }

  return (Result_size_t){.tag = OK, .ok = result};
}

String String_new() { return (String){.chars = charVec_new()}; }

void String_push(String *s, char c) { charVec_push(&s->chars, c); }

void String_push_slice(String *s, const char *cstr) {
  while (*cstr) {
    charVec_push(&s->chars, *cstr++);
  }
}

void String_push_str(String *s, String *o) {
  for (size_t i = 0; i < o->chars.len; ++i) {
    String_push(s, o->chars.data[i]);
  }
}

char *String_fmt(const String *s) {
  char *buffer = malloc(s->chars.len + 1);

  for (size_t i = 0; i < s->chars.len; ++i) {
    buffer[i] = s->chars.data[i];
  }

  buffer[s->chars.len] = '\0';

  return buffer;
}

void String_free(String *s) { charVec_free(&s->chars); }
